
-- Create a custom type for different ML models to ensure consistency.
CREATE TYPE ml_model_type AS ENUM (
    'bug_severity_classifier',
    'debugging_time_predictor',
    'code_quality_scorer',
    'error_pattern_detector',
    'performance_regression_predictor',
    'tool_effectiveness_analyzer'
);

-- Table to store metadata for deployed machine learning models.
CREATE TABLE public.ml_models (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    partner_id UUID REFERENCES public.partners(id) ON DELETE CASCADE,
    model_type ml_model_type NOT NULL,
    version TEXT NOT NULL,
    description TEXT,
    training_data_hash TEXT,
    accuracy NUMERIC(5, 4),
    is_active BOOLEAN NOT NULL DEFAULT false,
    deployed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (partner_id, model_type, version)
);
COMMENT ON TABLE public.ml_models IS 'Stores metadata for deployed machine learning models.';

-- Table for metadata about datasets used to train ML models.
CREATE TABLE public.training_datasets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    partner_id UUID REFERENCES public.partners(id) ON DELETE CASCADE,
    model_type ml_model_type NOT NULL,
    data_hash TEXT NOT NULL,
    data_source TEXT NOT NULL,
    feature_columns TEXT[],
    label_column TEXT,
    record_count BIGINT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE(partner_id, data_hash)
);
COMMENT ON TABLE public.training_datasets IS 'Metadata for datasets used to train ML models.';

-- Table to log all predictions made by ML models.
CREATE TABLE public.ml_predictions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id UUID NOT NULL REFERENCES public.ml_models(id) ON DELETE CASCADE,
    project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    input_data JSONB NOT NULL,
    prediction JSONB NOT NULL,
    confidence_score NUMERIC(5, 4),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ml_predictions IS 'Logs predictions made by ML models.';

-- Table to store personalized, actionable insights generated by the ML system.
CREATE TABLE public.ml_insights (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
    partner_id UUID NOT NULL REFERENCES public.partners(id) ON DELETE CASCADE,
    insight_type TEXT NOT NULL,
    content JSONB NOT NULL,
    confidence NUMERIC(5, 4),
    is_acknowledged BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    expires_at TIMESTAMPTZ
);
COMMENT ON TABLE public.ml_insights IS 'Personalized, actionable insights generated by the ML system.';

-- Enable Row Level Security for all new tables.
ALTER TABLE public.ml_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.training_datasets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_predictions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_insights ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Only service roles can manage the ML infrastructure tables.
CREATE POLICY "Service role can manage ml_models" ON public.ml_models FOR ALL
USING ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' )
WITH CHECK ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' );

CREATE POLICY "Service role can manage training_datasets" ON public.training_datasets FOR ALL
USING ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' )
WITH CHECK ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' );

CREATE POLICY "Service role can manage ml_predictions" ON public.ml_predictions FOR ALL
USING ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' )
WITH CHECK ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' );

-- Users can view and update their own insights.
CREATE POLICY "Users can view their own insights" ON public.ml_insights FOR SELECT
USING ( user_id = auth.uid() );

CREATE POLICY "Users can update their own insights" ON public.ml_insights FOR UPDATE
USING ( user_id = auth.uid() );

-- Service roles can create insights for users.
CREATE POLICY "Service role can create insights" ON public.ml_insights FOR INSERT
WITH CHECK ( (SELECT rolname FROM pg_roles WHERE oid = session_user::oid) = 'supabase_admin' );

-- Partners can view predictions related to their projects.
CREATE POLICY "Partners can view predictions in their projects" ON public.ml_predictions FOR SELECT
USING (
    project_id IN (
        SELECT id FROM public.projects WHERE partner_id = public.get_my_partner_id()
    )
);

-- Trigger to automatically update the 'updated_at' timestamp on the ml_models table.
CREATE TRIGGER handle_ml_models_updated_at
BEFORE UPDATE ON public.ml_models
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();
