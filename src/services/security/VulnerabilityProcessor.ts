
import { SecurityVulnerability } from './types';

export class VulnerabilityProcessor {
  consolidateFindings(analyses: any[]): SecurityVulnerability[] {
    const vulnerabilities: SecurityVulnerability[] = [];
    
    analyses.forEach((analysis, index) => {
      analysis.result.issues?.forEach((issue: any, issueIndex: number) => {
        const vulnerability: SecurityVulnerability = {
          id: `vuln_${index}_${issueIndex}_${Date.now()}`,
          type: this.mapIssueTypeToVulnerabilityType(issue.type),
          severity: issue.severity as any,
          title: issue.description || 'Security Vulnerability',
          description: issue.description,
          codeLocation: {
            file: 'analysis-target',
            startLine: issue.lineNumber || 1,
            endLine: (issue.lineNumber || 1) + 1,
            snippet: issue.codeExample || 'Code snippet not available'
          },
          impact: this.generateImpactDescription(issue.severity),
          remediation: {
            summary: issue.suggestion || 'Security remediation required',
            steps: this.generateRemediationSteps(issue.type),
            beforeCode: issue.codeExample || 'Before code not available',
            afterCode: this.generateSecureCode(issue.type),
            estimatedTime: this.estimateFixTime(issue.severity)
          },
          references: this.getSecurityReferences(issue.type),
          cvssScore: this.calculateCVSS(issue.severity)
        };
        
        vulnerabilities.push(vulnerability);
      });
    });

    return this.deduplicateVulnerabilities(vulnerabilities);
  }

  private mapIssueTypeToVulnerabilityType(issueType: string): SecurityVulnerability['type'] {
    const mapping: Record<string, SecurityVulnerability['type']> = {
      'injection': 'prompt_injection',
      'xss': 'xss',
      'data': 'data_leakage',
      'auth': 'auth_bypass',
      'validation': 'input_validation',
      'api': 'api_security'
    };
    
    return mapping[issueType.toLowerCase()] || 'client_side';
  }

  private generateImpactDescription(severity: string): string {
    const impacts = {
      critical: 'Immediate data breach risk, potential system compromise',
      high: 'Significant security risk, data exposure possible',
      medium: 'Moderate security concern, limited exposure risk',
      low: 'Minor security issue, low probability of exploitation',
      informational: 'Security best practice recommendation'
    };
    
    return impacts[severity] || impacts.medium;
  }

  private generateRemediationSteps(issueType: string): string[] {
    const steps = {
      injection: [
        'Implement input sanitization',
        'Use parameterized queries',
        'Add output encoding',
        'Validate and whitelist inputs'
      ],
      auth: [
        'Implement proper authentication',
        'Add authorization checks',
        'Use secure session management',
        'Enable multi-factor authentication'
      ]
    };
    
    return steps[issueType] || ['Review security best practices', 'Implement appropriate controls'];
  }

  private generateSecureCode(issueType: string): string {
    const secureExamples = {
      injection: `// Secure input handling
const sanitizedInput = validator.escape(userInput);
const query = db.prepare('SELECT * FROM users WHERE id = ?');
query.run(sanitizedInput);`,
      auth: `// Secure authentication
if (!req.user || !hasPermission(req.user, 'read', resource)) {
  return res.status(403).json({ error: 'Unauthorized' });
}`
    };
    
    return secureExamples[issueType] || '// Implement security controls as appropriate';
  }

  private estimateFixTime(severity: string): string {
    const times = {
      critical: '2-4 hours',
      high: '1-2 hours',
      medium: '30-60 minutes',
      low: '15-30 minutes',
      informational: '5-15 minutes'
    };
    
    return times[severity] || times.medium;
  }

  private getSecurityReferences(issueType: string): string[] {
    return [
      'https://owasp.org/www-project-top-ten/',
      'https://cheatsheetseries.owasp.org/',
      'https://cwe.mitre.org/'
    ];
  }

  private calculateCVSS(severity: string): number {
    const scores = {
      critical: 9.5,
      high: 7.8,
      medium: 5.4,
      low: 3.1,
      informational: 0.0
    };
    
    return scores[severity] || scores.medium;
  }

  private deduplicateVulnerabilities(vulnerabilities: SecurityVulnerability[]): SecurityVulnerability[] {
    const seen = new Set();
    return vulnerabilities.filter(vuln => {
      const key = `${vuln.type}_${vuln.codeLocation.startLine}_${vuln.title}`;
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    });
  }
}
